circuit ALU1 :
  module ALU1 :
    input clock : Clock
    input reset : UInt<1>
    input io_in_A : UInt<32>
    input io_in_B : UInt<32>
    input io_alu_Op : UInt<4>
    output io_out : UInt<32>
    output io_sum : UInt<32>

    node _sum_T = bits(io_alu_Op, 0, 0) @[RocketAlu.scala 39:38]
    node _sum_T_1 = sub(UInt<1>("h0"), io_in_B) @[RocketAlu.scala 39:52]
    node _sum_T_2 = tail(_sum_T_1, 1) @[RocketAlu.scala 39:52]
    node _sum_T_3 = mux(_sum_T, io_in_B, _sum_T_2) @[RocketAlu.scala 39:28]
    node _sum_T_4 = add(io_in_A, _sum_T_3) @[RocketAlu.scala 39:23]
    node sum = tail(_sum_T_4, 1) @[RocketAlu.scala 39:23]
    node _cmp_T = bits(io_in_A, 31, 31) @[RocketAlu.scala 40:26]
    node _cmp_T_1 = bits(io_in_B, 31, 31) @[RocketAlu.scala 40:46]
    node _cmp_T_2 = eq(_cmp_T, _cmp_T_1) @[RocketAlu.scala 40:35]
    node _cmp_T_3 = bits(sum, 31, 31) @[RocketAlu.scala 40:59]
    node _cmp_T_4 = bits(io_alu_Op, 1, 1) @[RocketAlu.scala 41:30]
    node _cmp_T_5 = bits(io_in_A, 31, 31) @[RocketAlu.scala 41:42]
    node _cmp_T_6 = bits(io_in_B, 31, 31) @[RocketAlu.scala 41:59]
    node _cmp_T_7 = mux(_cmp_T_4, _cmp_T_5, _cmp_T_6) @[RocketAlu.scala 41:20]
    node cmp = mux(_cmp_T_2, _cmp_T_3, _cmp_T_7) @[RocketAlu.scala 40:18]
    node shamt = bits(io_in_A, 4, 0) @[RocketAlu.scala 42:24]
    node _shin_T = bits(io_alu_Op, 3, 3) @[RocketAlu.scala 43:30]
    node _shin_T_1 = shl(UInt<16>("hffff"), 16) @[Bitwise.scala 102:47]
    node _shin_T_2 = xor(UInt<32>("hffffffff"), _shin_T_1) @[Bitwise.scala 102:21]
    node _shin_T_3 = shr(io_in_A, 16) @[Bitwise.scala 103:21]
    node _shin_T_4 = and(_shin_T_3, _shin_T_2) @[Bitwise.scala 103:31]
    node _shin_T_5 = bits(io_in_A, 15, 0) @[Bitwise.scala 103:46]
    node _shin_T_6 = shl(_shin_T_5, 16) @[Bitwise.scala 103:65]
    node _shin_T_7 = not(_shin_T_2) @[Bitwise.scala 103:77]
    node _shin_T_8 = and(_shin_T_6, _shin_T_7) @[Bitwise.scala 103:75]
    node _shin_T_9 = or(_shin_T_4, _shin_T_8) @[Bitwise.scala 103:39]
    node _shin_T_10 = bits(_shin_T_2, 23, 0) @[Bitwise.scala 102:28]
    node _shin_T_11 = shl(_shin_T_10, 8) @[Bitwise.scala 102:47]
    node _shin_T_12 = xor(_shin_T_2, _shin_T_11) @[Bitwise.scala 102:21]
    node _shin_T_13 = shr(_shin_T_9, 8) @[Bitwise.scala 103:21]
    node _shin_T_14 = and(_shin_T_13, _shin_T_12) @[Bitwise.scala 103:31]
    node _shin_T_15 = bits(_shin_T_9, 23, 0) @[Bitwise.scala 103:46]
    node _shin_T_16 = shl(_shin_T_15, 8) @[Bitwise.scala 103:65]
    node _shin_T_17 = not(_shin_T_12) @[Bitwise.scala 103:77]
    node _shin_T_18 = and(_shin_T_16, _shin_T_17) @[Bitwise.scala 103:75]
    node _shin_T_19 = or(_shin_T_14, _shin_T_18) @[Bitwise.scala 103:39]
    node _shin_T_20 = bits(_shin_T_12, 27, 0) @[Bitwise.scala 102:28]
    node _shin_T_21 = shl(_shin_T_20, 4) @[Bitwise.scala 102:47]
    node _shin_T_22 = xor(_shin_T_12, _shin_T_21) @[Bitwise.scala 102:21]
    node _shin_T_23 = shr(_shin_T_19, 4) @[Bitwise.scala 103:21]
    node _shin_T_24 = and(_shin_T_23, _shin_T_22) @[Bitwise.scala 103:31]
    node _shin_T_25 = bits(_shin_T_19, 27, 0) @[Bitwise.scala 103:46]
    node _shin_T_26 = shl(_shin_T_25, 4) @[Bitwise.scala 103:65]
    node _shin_T_27 = not(_shin_T_22) @[Bitwise.scala 103:77]
    node _shin_T_28 = and(_shin_T_26, _shin_T_27) @[Bitwise.scala 103:75]
    node _shin_T_29 = or(_shin_T_24, _shin_T_28) @[Bitwise.scala 103:39]
    node _shin_T_30 = bits(_shin_T_22, 29, 0) @[Bitwise.scala 102:28]
    node _shin_T_31 = shl(_shin_T_30, 2) @[Bitwise.scala 102:47]
    node _shin_T_32 = xor(_shin_T_22, _shin_T_31) @[Bitwise.scala 102:21]
    node _shin_T_33 = shr(_shin_T_29, 2) @[Bitwise.scala 103:21]
    node _shin_T_34 = and(_shin_T_33, _shin_T_32) @[Bitwise.scala 103:31]
    node _shin_T_35 = bits(_shin_T_29, 29, 0) @[Bitwise.scala 103:46]
    node _shin_T_36 = shl(_shin_T_35, 2) @[Bitwise.scala 103:65]
    node _shin_T_37 = not(_shin_T_32) @[Bitwise.scala 103:77]
    node _shin_T_38 = and(_shin_T_36, _shin_T_37) @[Bitwise.scala 103:75]
    node _shin_T_39 = or(_shin_T_34, _shin_T_38) @[Bitwise.scala 103:39]
    node _shin_T_40 = bits(_shin_T_32, 30, 0) @[Bitwise.scala 102:28]
    node _shin_T_41 = shl(_shin_T_40, 1) @[Bitwise.scala 102:47]
    node _shin_T_42 = xor(_shin_T_32, _shin_T_41) @[Bitwise.scala 102:21]
    node _shin_T_43 = shr(_shin_T_39, 1) @[Bitwise.scala 103:21]
    node _shin_T_44 = and(_shin_T_43, _shin_T_42) @[Bitwise.scala 103:31]
    node _shin_T_45 = bits(_shin_T_39, 30, 0) @[Bitwise.scala 103:46]
    node _shin_T_46 = shl(_shin_T_45, 1) @[Bitwise.scala 103:65]
    node _shin_T_47 = not(_shin_T_42) @[Bitwise.scala 103:77]
    node _shin_T_48 = and(_shin_T_46, _shin_T_47) @[Bitwise.scala 103:75]
    node _shin_T_49 = or(_shin_T_44, _shin_T_48) @[Bitwise.scala 103:39]
    node shin = mux(_shin_T, _shin_T_49, io_in_A) @[RocketAlu.scala 43:20]
    node _shiftr_T = bits(io_alu_Op, 0, 0) @[RocketAlu.scala 44:32]
    node _shiftr_T_1 = bits(shin, 0, 0) @[RocketAlu.scala 44:43]
    node shiftr_hi = and(_shiftr_T, _shiftr_T_1) @[RocketAlu.scala 44:36]
    node _shiftr_T_2 = cat(shiftr_hi, UInt<1>("h0")) @[Cat.scala 30:58]
    node _shiftr_T_3 = asSInt(_shiftr_T_2) @[RocketAlu.scala 44:53]
    node _shiftr_T_4 = dshr(_shiftr_T_3, shamt) @[RocketAlu.scala 44:60]
    node shiftr = bits(_shiftr_T_4, 1, 0) @[RocketAlu.scala 44:69]
    node shiftl_hi = bits(shiftr, 0, 0) @[Bitwise.scala 109:18]
    node shiftl_lo = bits(shiftr, 1, 1) @[Bitwise.scala 109:44]
    node shiftl = cat(shiftl_hi, shiftl_lo) @[Cat.scala 30:58]
    node _out_T = eq(io_alu_Op, UInt<4>("h0")) @[RocketAlu.scala 47:29]
    node _out_T_1 = eq(io_alu_Op, UInt<4>("h1")) @[RocketAlu.scala 47:54]
    node _out_T_2 = or(_out_T, _out_T_1) @[RocketAlu.scala 47:41]
    node _out_T_3 = eq(io_alu_Op, UInt<4>("h5")) @[RocketAlu.scala 48:31]
    node _out_T_4 = eq(io_alu_Op, UInt<4>("h7")) @[RocketAlu.scala 48:56]
    node _out_T_5 = or(_out_T_3, _out_T_4) @[RocketAlu.scala 48:43]
    node _out_T_6 = eq(io_alu_Op, UInt<4>("h9")) @[RocketAlu.scala 49:31]
    node _out_T_7 = eq(io_alu_Op, UInt<4>("h8")) @[RocketAlu.scala 49:56]
    node _out_T_8 = or(_out_T_6, _out_T_7) @[RocketAlu.scala 49:43]
    node _out_T_9 = eq(io_alu_Op, UInt<4>("h6")) @[RocketAlu.scala 50:31]
    node _out_T_10 = eq(io_alu_Op, UInt<4>("h2")) @[RocketAlu.scala 51:31]
    node _out_T_11 = and(io_in_A, io_in_B) @[RocketAlu.scala 51:53]
    node _out_T_12 = eq(io_alu_Op, UInt<4>("h3")) @[RocketAlu.scala 52:31]
    node _out_T_13 = or(io_in_A, io_in_B) @[RocketAlu.scala 52:52]
    node _out_T_14 = eq(io_alu_Op, UInt<4>("h4")) @[RocketAlu.scala 53:31]
    node _out_T_15 = xor(io_in_A, io_in_B) @[RocketAlu.scala 53:53]
    node _out_T_16 = eq(io_alu_Op, UInt<4>("ha")) @[RocketAlu.scala 54:31]
    node _out_T_17 = eq(io_alu_Op, UInt<4>("hb")) @[RocketAlu.scala 55:31]
    node _out_T_18 = mux(_out_T_17, io_in_A, UInt<1>("h0")) @[RocketAlu.scala 55:20]
    node _out_T_19 = mux(_out_T_16, io_in_A, _out_T_18) @[RocketAlu.scala 54:20]
    node _out_T_20 = mux(_out_T_14, _out_T_15, _out_T_19) @[RocketAlu.scala 53:20]
    node _out_T_21 = mux(_out_T_12, _out_T_13, _out_T_20) @[RocketAlu.scala 52:20]
    node _out_T_22 = mux(_out_T_10, _out_T_11, _out_T_21) @[RocketAlu.scala 51:20]
    node _out_T_23 = mux(_out_T_9, shiftr, _out_T_22) @[RocketAlu.scala 50:20]
    node _out_T_24 = mux(_out_T_8, shiftl, _out_T_23) @[RocketAlu.scala 49:20]
    node _out_T_25 = mux(_out_T_5, cmp, _out_T_24) @[RocketAlu.scala 48:20]
    node out = mux(_out_T_2, sum, _out_T_25) @[RocketAlu.scala 47:18]
    io_out <= out @[RocketAlu.scala 58:12]
    io_sum <= sum @[RocketAlu.scala 59:12]
